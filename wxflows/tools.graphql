# [[ tool definition example ]]
# .
# Flows Engine allows creating LLM "tools" from parts of your GraphQL schema. To
# do that, add a field to the Query type, using the example below and replacing
# placeholders with something relevant for your tool.
# .
# extend type Query {
#   tool_name_definition: TC_GraphQL # <-- replace tool_name with something
#     @supplies(query: "tc_tools")
#     @materializer(
#       query: "tc_graphql_tool"
#       arguments: [
#         { name: "name", const: "[an internal tool name, e.g. 'wikipedia']" }
#         { name: "description", const: "[a description that helps LLMs to use this tool, e.g. 'Retrieve information from Wikipedia']" }
#         { name: "fields", const: "[a regex defining a subset of fields in this GraphQL schema, e.g. 'search|page' or 'mytool_.*']" }
#       ]
#     )
# }
# [[ end of tool definition example ]]
# schema.graphql
extend type Query {
  wikipediaTool: TC_GraphQL
    @supplies(query: "tc_tools")
    @materializer(
      query: "tc_graphql_tool"
      arguments: [
        { name: "name", const: "wikipedia" }
        { name: "description", const: "Retrieve information from Wikipedia." }
        { name: "fields", const: "search|page" }
      ]
    )
  google_books: TC_GraphQL
    @supplies(query: "tc_tools")
    @materializer(
      query: "tc_graphql_tool"
      arguments: [
        { name: "name", const: "google_books" }
        {
          name: "description"
          const: "Retrieve information from Google Books. Find books by search string, for example to search for Daniel Keyes 'Flowers for Algernon' use q: 'intitle:flowers+inauthor:keyes'"
        }
        { name: "fields", const: "books|book" }
      ]
    )
  curl_comments: TC_GraphQL
    @supplies(query: "tc_tools")
    @materializer(
      query: "tc_graphql_tool"
      arguments: [
        { name: "name", const: "curl_comments" }
        {
          name: "description"
          const: "Retrieve comments from a dummy JSON API. Return a list of comment with user information, including body, likes, postId, and user details (username)"
        }
        { name: "fields", const: "dummyCommentsQuery" }
      ]
    )
  customer_data: TC_GraphQL
    @supplies(query: "tc_tools")
    @materializer(
      query: "tc_graphql_tool"
      arguments: [
        { name: "name", const: "customer_data" }
        {
          name: "description"
          const: "Retrieve customer information including their address and order history. Return customer detail like name, email, address, and past orders with shipping information."
        }
        { name: "fields", const: "customerQuery" }
      ]
    )
  appointment_data: TC_GraphQL
    @supplies(query: "tc_tools")
    @materializer(
      query: "tc_graphql_tool"
      arguments: [
        { name: "name", const: "appointment_data" }
        {
          name: "description"
          const: "Retrieve appointment information from the Appointege API. Returns appointment details including customer name, email, phone, status, selected date and time, message, and associated service and user information. Use the 'id' parameter to fetch a specific appointment, e.g., id: 'cmcodhmf20001mst06148m0cp'. If no id is provided, all appointments are returned."
        }
        { name: "fields", const: "appointmentQuery" }
      ]
    )
  youtube_transcript: TC_GraphQL
    @supplies(query: "tc_tools")
    @materializer(
      query: "tc_graphql_tool"
      arguments: [
        { name: "name", const: "youtube_transcript" }
        {
          name: "description"
          const: "Retrieve transcripts for a given YouTube video. The videoUrl should be in the format https://www.youtube.com/watch?v=VIDEO_ID"
        }
        { name: "fields", const: "transcript" }
      ]
    )
}
